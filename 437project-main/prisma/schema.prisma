generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = "postgres://susvfwrsihxzay:109373f97e37be65ed85e8244ae4bb4ec6cfddf546cd1d2b248962e0b43ed769@ec2-54-173-237-110.compute-1.amazonaws.com:5432/d608rj4qtuh7rv"
}

model Registered {
  register_ID   String @id @default(cuid())
  userEmail     String
  postId        String
  announcement  String

  @@unique([userEmail, postId])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  posts         Post[]
  sessions      Session[]
}

model Post {
  id          String  @id @default(cuid())
  sport       String?
  description String?
  published   Boolean @default(false)
  authorId    String?
  date        String?
  time        String?
  capacity    String?
  attendees   Int?
  author      User?   @relation(fields: [authorId], references: [id])
  messages    String[]

  @@unique([sport, description])
}

model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?
  user               User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  id         Int      @id @default(autoincrement())
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}